(in-package :aml)



(define-class base-concrete-class
  :inherit-from (object)
  :properties (
               pipe-diameter (default 0.5)
               width (default 0.5)
               height (default 0.5)
               depth (default 0.5)
               )
  :subobjects (
               (base :class 'box-object
                   width ^^pipe-diameter
                   base-width width
                   depth (* 4 ^width)
                   base-depth depth
                   height ^width
                   base-height height
                   orientation (list
                                (rotate 90 '(1 0 0))
                                (rotate 90 '(0 0 1))
                                (translate (list 0 0 (- (+ (/ ^^pipe-diameter 2.9) ))))
                                )
                   )
               )
  ) 
  
(define-class base-ibeam-class
  :inherit-from (object)
  :properties (
               pipe-diameter (default 0.5)
               width (default 0.5)
               height (default 0.5)
               depth (default 0.5)
               )
  :subobjects (
               (top :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 8 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (+ (/ ^width 4) (* ^height 2.5))))
                               
                               )
                   
                   )
               (middle :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 8 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(0 1 0))
                               (translate (list 0 ^height 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(0 0 1))
                               (translate (list 0 ^height 0))
                               )
                   )
                (bottom :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 8 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (-(+ (/ ^width 4) (* ^height 2.5)))))
                               )
                   )
               )
  )

(define-class pipe-class
  :inherit-from (object)
  :properties (
               pipe-diameter (default 0.5)
               pipe-thickness (default (/ ^pipe-diameter 20))
               pipe-height (default (* ^pipe-diameter 5))
               )
  :subobjects (
               (pipe :class 'pipe-object 
                   outer-diameter ^^pipe-diameter
                   thickness ^^pipe-thickness
                   height ^^pipe-height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               
                               (translate (list 0 0 (+ (/ ^^pipe-diameter 2) (/ ^^pipe-diameter 8) (/ ^^pipe-diameter 32))))
                               )
                   )
               )
  )

(define-class bolt-class
  :inherit-from (union-object)
  :properties (
               nut-hole-diameter (default 0.006)
               head-height (default 0.048)
               bolt-height (default (* ^head-height 8))
               nut-height (* ^nut-hole-diameter 0.9)
               display? t
               object-list (list (the head) (the shaft))
               )
  :subobjects (
               (head :class 'nut-class
                   nut-hole-diamater ^^nut-hole-diameter
                   display? nil
                   )
               (shaft :class 'cylinder-object
                   height ^^bolt-height
                   diameter ^^nut-hole-diameter
                   orientation (list
                               (translate (list 0 0 (- (- (/ ^^bolt-height 2) ^^head-height))))
                               )
                   solid? t
                   display? nil
                   )
               )
)

(define-class nut-class
  :inherit-from (difference-object)
  :properties (
               
               nut-hole-diameter (default .006)
               nut-hex-width (* ^nut-hole-diameter 1.8)
               ;;Gets the points for the hex geometry of a bolt nut
               point-list (get-hexpoints ^nut-hex-width)
               nut-height (* ^nut-hole-diameter 0.9)
               display? t
               ;;Removes the the hole from the solid hex geometry, creating a nut
               object-list (list (the nut) (the hole))
               )
  :subobjects (
               (nut-geometry :class 'polygon-object
                   vertices ^^point-list
                   dimension 2
                   display? nil
                   )
               (nut :class 'extrusion-object
                   swept-object ^^nut-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil

                   )
               (hole :class 'cylinder-object
                   height ^^nut-height
                   diameter ^^nut-height
                   orientation (list (translate (list 0 0 (/ ^^nut-height 2))))
                   solid? t
                   display? nil
                   )
               )
)

(define-class bolt-nut-class
  :inherit-from (object)
  :properties(
              nut-hole-diameter (default 0.006)
              nut-height (* ^nut-hole-diameter 0.9)
              bolt-height (default (* ^nut-height 8))
              head-height ^nut-height
              ;;distance between bolt head and the nut 
              nut-bolt-distance (default (* (/ ^bolt-height 3) 2))
              )
  :subobjects (
               (bolt :class 'bolt-class
                   nut-hole-diameter ^^nut-hole-diameter
                   bolt-height (+ ^^nut-bolt-distance (* ^^nut-height 3))
                   orientation (list
                                (rotate 180 '(0 1 0))
                                )
                   )
               (nut :class 'nut-class
                   nut-hole-diameter ^^nut-hole-diameter
                   orientation (list

                                (translate (list 0 0 ^^nut-bolt-distance))
                                )
                   )
               
               )
  )



(defun get-hexpoints (nut-width)
  (let* (
         (d (/ (* nut-width 1.11) 2))
         (point1 (list (* d (cosd 30)) (* d (sind 30)) 0))
         (point2 (list 0 d 0))
         (point3 (list (* d (cosd 150)) (* d (sind 150)) 0))
         (point4 (list (* d (cosd 210)) (* d (sind 210)) 0))
         (point5 (list 0 (- 0 d) 0))
         (point6 (list (* d (cosd 330)) (* d (sind 330)) 0))
                                                                    
         (pointlist (list point1 point2 point3 point4 point5 point6))
        
        
        )
    pointlist
    )
  )



(define-class shims-class
  :inherit-from (object)
  :properties(
              pipe-diameter (default 0.5)
              thickness (default (/ ^pipe-diameter 40))
              pipe-radius (/ ^pipe-diameter 2)
              pipe-center-to-top-baseplate (default (/ (* ^pipe-radius 3) 2))
              point4z (* (* ^pipe-radius 0.6) (sind 30))
              point-list (list
                          (list (- (* ^pipe-radius 0.8) (+ ^thickness 0.00001)) 0.0 0.0)
                          (list (* ^pipe-radius 0.2) 0.0 0.0)
                          (list (* ^pipe-radius 0.2) 0.0 (- ^pipe-center-to-top-baseplate ^pipe-radius))
                          (list (* ^pipe-radius 0.8) 0.0 (+ (- ^pipe-center-to-top-baseplate ^pipe-radius) ^point4z))
                          (list (* ^pipe-radius 0.8) 0.0 0.0)
                          )
              bolt-hole-width (default (* ^thickness 0.6))
              bolt-to-nut-distance (default (* 2 (* ^pipe-radius 0.8)))
              shim-width (/ ^pipe-diameter 6)
              )              
  :subobjects(

              (lines :class 'polyline-object
                  vertices ^^point-list
                  )
              (frame :class 'extrusion-object
                  swept-object ^lines
                  vector '(0.0 10.0 0.0)
                  distance ^^shim-width
                  solid? t
                  )
              (clamp :class 'surface-thickened-class
                  source-object ^frame
                  back-thickness ^^thickness
                  )
              (mirror-clamp :class 'mirror-object
                  source-object ^clamp
                  basis-vector '((0 1 0) (0 0 1))
                  point-on-mirror '(0 0 0)
               
               )
              (pipe :class 'pipe-object
                  outer-diameter 0.5
                  height 5
                  thickness (* ^^thickness 3)
                  orientation (list
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 ^^pipe-center-to-top-baseplate))
                               )
                  )
              (bolt-nut :class 'bolt-nut-class
                  nut-hole-diameter ^^bolt-hole-width
                  nut-bolt-distance ^^bolt-to-nut-distance
                  orientation (list
                               (rotate 90 '(1 1 1))
                               (translate (list 0 0 ^^pipe-center-to-top-baseplate))
                               )
                  )
;;;                   orientation (list
;;;                                (rotate 90.0 '(0.0 1.0 0.0))
;;;                                (translate (list
;;;                                            (- (* ^^pipe-radius 0.8))
;;;                                            (/ ^^shim-width 2)
;;;                                            (/ ^^shim-width 2)
;;;                                            ))
;;;                                )
;;;                   )
              )
  )





(define-class pipe-support-class
  :inherit-from (object)
  :properties (
               base-support-type (default 'ibeam)
               ;;base-support-type 'concrete
               pipe-diameter (default 0.5)
               
               base-width (default 0.5)
               base-depth (default 2)
               base-height (default 0.5)
               )
  :subobjects (
             (base :class (case !base-support-type
                            (concrete 'base-concrete-class)
                            (ibeam 'base-ibeam-class)
                            (t 'base-concrete-class)
                            )
                 pipe-diameter ^^pipe-diameter
                 
                 )
             (pipe :class 'pipe-class
                 pipe-diameter ^^pipe-diameter
                 )
             )
  )

