(in-package :aml)

(define-class bolt-class
  :inherit-from (union-object)
  :properties (
               nut-width (default 18);;size M12
               point-list (get-nutpoints ^nut-width)
               nut-height (/ ^nut-width 1.8)
               display? t
               object-list (list (the nut) (the shaft))
               )
  :subobjects (
               (nut-geometry :class 'polygon-object
                   vertices ^^point-list
                   dimension 2
                   display? nil
                   )
               (nut :class 'extrusion-object
                   swept-object ^^nut-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil

                   )
               (shaft :class 'cylinder-object
                   height (* ^^nut-height 8)
                   diameter ^^nut-height
                   orientation (list (translate (list 0 0 (/ ^height 2))))
                   solid? t
                   display? nil
                   )
               )
)



(define-class nut-class
  :inherit-from (difference-object)
  :properties (
               nut-width (default 0.05);;size M12
               point-list (get-nutpoints ^nut-width)
               nut-height (/ ^nut-width 1.8)
               display? t
               object-list (list (the nut) (the hole))
               )
  :subobjects (
               (nut-geometry :class 'polygon-object
                   vertices ^^point-list
                   dimension 2
                   display? nil
                   )
               (nut :class 'extrusion-object
                   swept-object ^^nut-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil

                   )
               (hole :class 'cylinder-object
                   height ^^nut-height
                   diameter ^^nut-height
                   orientation (list (translate (list 0 0 (/ ^^nut-height 2))))
                   solid? t
                   display? nil
                   )
               )
)

(defun get-nutpoints (nut-width)
  (let* (
         (d (/ (* nut-width 1.11) 2))
         (point1 (list (* d (cosd 30)) (* d (sind 30)) 0))
         (point2 (list 0 d 0))
         (point3 (list (* d (cosd 150)) (* d (sind 150)) 0))
         (point4 (list (* d (cosd 210)) (* d (sind 210)) 0))
         (point5 (list 0 (- 0 d) 0))
         (point6 (list (* d (cosd 330)) (* d (sind 330)) 0))
                                                                    
         (pointlist (list point1 point2 point3 point4 point5 point6))
        
        
        )
    pointlist
    )
  )

(define-class set-nut-class
  :inherit-from (circular-array-object)
  :properties (
               
               reference-coordinate-system (default nil)

               )
  :subobjects (
               (bolt1-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   )
               (bolt2-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   )
               (bolt3-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   )
               (bolt4-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   )
               (bolt1 :class bolt-class
                   reference-coordinate-system ^^bolt1-coordinate-system
               )
               (bolt2 :class bolt-class
               )
               (bolt3 :class bolt-class
               )
               (bolt4 :class bolt-class
               )

               )
  )

(define-class base-concrete-class
  :inherit-from (object)
  :properties (
              pipe-radius ^^outer-pipe-radius 
              
              reference-coordinate-system (default nil)

              width ^^base-width
              height ^^base-height 
              depth ^^base-depth 
               )
  :subobjects (
               (base :class 'box-object
                   width ^^width 
                   depth ^^depth
                   height ^^height
                   reference-coordinate-system ^^reference-coordinate-system
                   orientation(list
                               (translate (list 0 0(* ^^pipe-radius 0.44))))
                   )
               )

  ) 

(define-class base-ibeam-class
  :inherit-from (object)
  :properties (

               pipe-diameter (* ^^outer-pipe-radius 4.41)
               reference-coordinate-system (default nil)
               )
  :subobjects (
               (top :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (+ (/ ^width 4) (* ^height 2.5))))
                               
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   
                   )
               (middle :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(0 1 0))
                               (translate (list 0 ^height 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(0 0 1))
                               (translate (list 0 ^height 0))
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   )
                (bottom :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (-(+ (/ ^width 4) (* ^height 2.5)))))
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   )
               )
  )


(define-class ubeam-class
  :inherit-from (object);;pipe-elbow-class
  :properties (
               ;;pipe-elbow-properties
               angle ^^ubeam-angle
               elbow-radius (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))
               thickness ^^ubeam-thickness
               outer-diameter ^^ubeam-outer-diameter

               outer-pipe-radius ^^outer-pipe-radius

               ;;open-cylinder-properties
               ubeam-pipe-gap ^^ubeam-pipe-gap
               pipe-height ^^pipe-height
               base-depth ^^base-depth
               diameter ^^pipe-diameter
               
               ;;lower-ubeam-height ^^lower-ubeam-pipe-height

               reference-coordinate-system (default nil)
               
               )
  :subobjects (
               (ubeam-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   reference-coordinate-system ^^reference-coordinate-system
                   )
               (ubeam-pipe-right-coordinate-system :class 'coordinate-system-class
                   origin (list (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2)) 0.0 (-(/ ^^pipe-height 2))) 
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
               (ubeam-pipe-left-coordinate-system :class 'coordinate-system-class
                   origin (list (-(+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))) 0.0 (-(/ ^^pipe-height 2))) 
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
               (ubeam :class 'pipe-elbow-object
                 angle ^^ubeam-angle
                 elbow-radius ^^elbow-radius
                 thickness ^^thickness
                 outer-diameter ^^outer-diameter
                 orientation (list
                              (rotate 90 '(0 0 1)))
                reference-coordinate-system ^^ubeam-coordinate-system
                 )
               (ubeam-pipe-right :class 'open-cylinder-object
                   diameter ^^diameter
                   height ^^pipe-height
                   reference-coordinate-system ^^ubeam-pipe-right-coordinate-system
                   )
               (ubeam-pipe-left :class 'open-cylinder-object
                   diameter ^^diameter
                   height ^^pipe-height
                   reference-coordinate-system ^^ubeam-pipe-left-coordinate-system
                   )
               

                   
                   
               )                   
  )


(define-class pipe-support-class
  :inherit-from (object)
  :properties (
               ;;Height Y
               ;;Width X
               ;;Depth Z
               
               ;;Pipe properties
              ;; pipe-height (default 10)
               outer-pipe-radius (default 1)
               ubeam-pipe-gap (* ^outer-pipe-radius 0.05)
               ubeam-radius 0.0
               ubeam-height 0.0

               ;;Base properties
               base-height (^base-plate-height)
               base-depth (* ^outer-pipe-radius 0.5)
               base-width (* ^outer-pipe-radius 3)

               ;;Base-plate properties
               base-plate-height (* (+ ^outer-pipe-radius ^ubeam-thickness) 1.05)
               base-plate-depth (* ^outer-pipe-radius 0.05)
               base-plate-width (* (+ (+ ^outer-pipe-radius ^ubeam-pipe-gap) ^ubeam-thickness) 2.2) 
               

               ;;Ubeam properties
               ubeam-angle (default 180)
               ubeam-thickness (* ^outer-pipe-radius 0.05)
               ubeam-outer-diameter (* ^outer-pipe-radius 0.05)

               ;;Ubeam pipe properties
               pipe-diameter ^ubeam-outer-diameter
               pipe-height (* ^outer-pipe-radius 1.4)

               ;;Base-type
               base-type (default base-ibeam-class)

               ;;Base-concrete-ubeam

               
          
               )

  
  :subobjects (
               (global-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   )
               (base-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 (-(+ (* ^^outer-pipe-radius 0.69) ^^base-plate-depth)))
                   reference-coordinate-system ^^global-coordinate-system
                    )
               (base :class 'base-ibeam-class
                   reference-coordinate-system ^^base-coordinate-system
                    )
               (base-plate-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 (- (/ ^^base-plate-depth 2)))
                   ) 
               (base-plate :class 'box-object
                   height ^^base-plate-height
                   depth ^^base-plate-depth
                   width ^^base-plate-width
                   reference-coordinate-system ^^base-plate-coordinate-system
                   )
               (ubeam1-coordinate-system :class 'coordinate-system-class
                    origin (list 0.0 (* ^^outer-pipe-radius 0.5) (+ ^^outer-pipe-radius ^^ubeam-pipe-gap))
                    reference-coordinate-system ^^global-coordinate-system
                    )
               (ubeam1 :class 'ubeam-class
                    reference-coordinate-system ^^ubeam1-coordinate-system
                    )
               (ubeam2-coordinate-system :class 'coordinate-system-class
                    origin (list 0.0 (* ^^outer-pipe-radius -0.5) (+ ^^outer-pipe-radius ^^ubeam-pipe-gap))
                    reference-coordinate-system ^^global-coordinate-system
                    )
                (ubeam2 :class 'ubeam-class
                    reference-coordinate-system ^^ubeam2-coordinate-system
                    )
                
                )
  )



              





  
               