(in-package :aml)

(define-class global-coordinate-system
  :inherit-from (coordinate-system-class) 
  :properties (
               origin '(0 0 0)
               display? t
               )
  )
  

(define-class base-concrete-class
  :inherit-from (object)
  :properties (
              pipe-radius ^^outer-pipe-radius 
              
              reference-coordinate-system (default nil)

              width ^^base-width
              height ^^base-height 
              depth ^^base-depth 
               )
  :subobjects (
               (base :class 'box-object
                   width ^^width 
                   depth ^^depth
                   height ^^height
                   reference-coordinate-system ^^reference-coordinate-system
                   orientation(list
                               (translate (list 0 0(* ^^pipe-radius 0.44))))
                   )
               )

  ) 

(define-class base-ibeam-class
  :inherit-from (object)
  :properties (

               base-size (default 5)
               reference-coordinate-system (default nil)


               pipe-diameter ^base-size
               )
  :subobjects (
               (top :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth ^depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (+ (/ ^width 4) (* ^height 2.5))))
                               
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   
                   )
               (middle :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth ^depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(0 1 0))
                               (translate (list 0 ^height 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(0 0 1))
                               (translate (list 0 ^height 0))
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   )
                (bottom :class 'box-object
                   width (/ ^^pipe-diameter 4)
                   base-width ^width
                   depth (* 4 ^width)
                   base-depth ^depth
                   height (/ ^^pipe-diameter 32)
                   base-height ^height
                   orientation(list
                               (rotate 90 '(1 0 0))
                               (rotate 90 '(0 1 0))
                               (rotate 90 '(0 0 1))
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 (-(+ (/ ^width 4) (* ^height 2.5)))))
                               )
                   reference-coordinate-system ^^reference-coordinate-system
                   )
               )
  )


(define-class ubeam-class
  :inherit-from (object);;pipe-elbow-class
  :properties (
               ;;USER INPUTS;;
               ;;Angle of ubeam
               angle (default 180)
               ;;Radius of the top of the ubeam
               elbow-radius (default 5)
               ;;Diameter of the pipe
               outer-diameter (default 0.5)                      
               ;;Radius of the pipe meant to be inside of the ubeam
               outer-pipe-radius (default 4.5)
               ;;Gap from the ubeam to the pipe
               ubeam-pipe-gap
               ;;Height of the bottom part of the ubeam
               pipe-height
               ;;The reference coordinate system; default set in (0.0 0.0 0.0) 
               reference-coordinate-system (default nil)


               ;;BACKEND PROPERTIES;;
               ;;Diameter for bottom pipes; should be the same as the diameter of the top-pipes
               diameter ^outer-diameter
               ;;Thickness equal to outer-diameter will give a solid pipe
               thickness ^outer-diameter
               
               )
  :subobjects (
               (ubeam-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   reference-coordinate-system ^^reference-coordinate-system
                   )
               (ubeam-pipe-right-coordinate-system :class 'coordinate-system-class
                   origin (list (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2)) 0.0 (-(/ ^^pipe-height 2))) 
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
               (ubeam-pipe-left-coordinate-system :class 'coordinate-system-class
                   origin (list (-(+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))) 0.0 (-(/ ^^pipe-height 2))) 
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
               (ubeam :class 'pipe-elbow-object
                 angle ^^ubeam-angle
                 elbow-radius ^^elbow-radius
                 thickness ^^thickness
                 outer-diameter ^^outer-diameter
                 orientation (list
                              (rotate 90 '(0 0 1)))
                reference-coordinate-system ^^ubeam-coordinate-system
                 )
               
               (ubeam-pipe-right :class 'open-cylinder-object
                   diameter ^^diameter
                   height ^^pipe-height
                   reference-coordinate-system ^^ubeam-pipe-right-coordinate-system
                   )
               (ubeam-pipe-left :class 'open-cylinder-object
                   diameter ^^diameter
                   height ^^pipe-height
                   reference-coordinate-system ^^ubeam-pipe-left-coordinate-system
                   )
               )                   
  )

(define-class lower-support-class
  :inherit-from (polygon-object)
  :properties (
               outer-radius (default 1)
               a (* ^outer-radius 0.1)
               b (* ^outer-radius 0.2)
               c (* ^outer-radius 0.7)
                vertices (list
                          (list 0.0 0.0 0.0)
                          (list (-^c) 0.0 (-^a))
                          (list (-^c) 0.0 (-^b))
                          (list 0.0 0.0 (-^b))
                          )
               dimension 2
               )
  )


(define-class flat-ubeam-class
  :inherit-from (object)
  :properties (
               ;;Diameter of pipe
               outer-pipe-radius (default 5)
               ;;Distance between the pipe and the flat ubeam
               ubeam-pipe-gap (default 0.5)
               ;;Height of the bottom part of the ubeam
               pipe-height (default 3)
               ;;Depth of the base plate
               base-depth (default 4)
               ;;Diameter arc
               diameter (default 5)
               ;;Height of the base plate
               base-plate-height (default 1)
               ;;Point on mirror, connected to the position input
               input-origin-pos (default (list 0.0 0.0 0.0))
               ;;
               pipe-direction (default (list 1.0 0.0 0.0))
               pipe-up-direction(default (list 0.0 0.0 1.0))
               ;;The reference coordinate system; default set in (0.0 0.0 0.0) 
               reference-coordinate-system (default nil)
               )
  :subobjects(
              (ubeam-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   reference-coordinate-system ^^reference-coordinate-system
                   )
              (pipe-coordinate-system :class 'coordinate-system-class
                  origin (list (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2)) 0.0 0.0)
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
              (lower-pipe-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 (-^^outer-pipe-radius) 0.0)
                   reference-coordinate-system ^^pipe-coordinate-system
                   )
              (flat-ex :class 'extrusion-object
                  swept-object ^flat-ubeam1
                  vector '(0.0 0.0 1.0)
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  (flat-ubeam1 :class 'arc-object
                               radius (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))
                               )
                  reference-coordinate-system ^^ubeam-coordinate-system
                  )
              (flat-pipe :class 'extrusion-object
                  swept-object ^flat-pipe1
                  vector '(0.0 0.0 1.0)
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  outer ^^outer-pipe-radius
                  (flat-pipe1 :class 'line-object
                              point1 '(0.0 0.0 0.0)
                              point2 (list 0.0 (-^^outer) 0.0)
                              )
                  reference-coordinate-system ^^pipe-coordinate-system
                  )
              (flat-pipe-mirror :class 'mirror-object
                  basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                  point-on-mirror ^^input-origin-pos
                  source-object ^^flat-pipe
                  )
              (lower-flat-pipe :class 'extrusion-object
                  swept-object ^lower-pipe
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  vector '(0.0 0.0 1.0)
                  (lower-pipe :class 'line-object
                              point1 '(0.0 0.0 0.0)
                              point2 (list (* ^^outer-pipe-radius 0.8) 0.0 0.0)
                              )
                  reference-coordinate-system ^^lower-pipe-coordinate-system
                  )
               (lower-flat-pipe-mirror :class 'mirror-object
                  basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                  point-on-mirror ^^input-origin-pos
                  source-object ^^lower-flat-pipe
                  )
              
              )
  )

(define-class flat-ubeam-class-change
  :inherit-from (object)
  :properties (
               ;;Diameter of pipe
               outer-pipe-radius (default 5)
               ;;Distance between the pipe and the flat ubeam
               ubeam-pipe-gap (default 0.5)
               ;;Height of the bottom part of the ubeam
               pipe-height (default 3)
               ;;Depth of the base plate
               base-depth (default 4)
               ;;Diameter arc
               diameter (default 5)
               ;;Height of the base plate
               base-plate-height (default 1)
               ;;Point on mirror, connected to the position input
               input-origin-pos (default (list 0.0 0.0 0.0))
               ;;
               pipe-direction (default (list 1.0 0.0 0.0))
               pipe-up-direction(default (list 0.0 0.0 1.0))
               ;;The reference coordinate system; default set in (0.0 0.0 0.0) 
               reference-coordinate-system (default nil)
               )
  :subobjects(
              (ubeam-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 0.0)
                   reference-coordinate-system ^^reference-coordinate-system
                   )
              (pipe-coordinate-system :class 'coordinate-system-class
                  origin (list (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2)) 0.0 0.0)
                   reference-coordinate-system ^^ubeam-coordinate-system
                   )
              (lower-pipe-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 (-^^outer-pipe-radius) 0.0)
                   reference-coordinate-system ^^pipe-coordinate-system
                   )
              (flat-ex :class 'extrusion-object
                  swept-object ^flat-ubeam1
                  vector '(0.0 0.0 1.0)
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  (flat-ubeam1 :class 'arc-object
                               radius (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))
                               )
                  reference-coordinate-system ^^ubeam-coordinate-system
                  )
              (flat-pipe :class 'extrusion-object
                  swept-object ^flat-pipe1
                  vector '(0.0 0.0 1.0)
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  outer ^^outer-pipe-radius
                  (flat-pipe1 :class 'line-object
                              point1 '(0.0 0.0 0.0)
                              point2 (list 0.0 (-^^outer) 0.0)
                              )
                  reference-coordinate-system ^^pipe-coordinate-system
                  )
              (flat-pipe-mirror :class 'mirror-object
                  basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                  point-on-mirror ^^input-origin-pos
                  source-object ^^flat-pipe
                  )
              (lower-flat-pipe :class 'extrusion-object
                  swept-object ^lower-pipe
                  distance (/ (* ^^base-plate-height 1.6) 2)
                  vector '(0.0 0.0 1.0)
                  (lower-pipe :class 'line-object
                              point1 '(0.0 0.0 0.0)
                              point2 (list (* ^^outer-pipe-radius 0.8) 0.0 0.0)
                              )
                  reference-coordinate-system ^^lower-pipe-coordinate-system
                  )
               (lower-flat-pipe-mirror :class 'mirror-object
                  basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                  point-on-mirror ^^input-origin-pos
                  source-object ^^lower-flat-pipe
                  )
              
              )
  )

(define-class triangle-class
  :inherit-from (polygon-object)
  :properties (
               vertices '(
                          (0.0 0.0 0.0)
                          (0.0 0.0 1.0)
                          (1.0 0.0 0.0)
                          )
               dimension 2
               )
  )
(defun listDir (direction up)
  (let* (
         (list2 (cross-product direction up))
         )
    list2
    )
  )

(define-class pipe-support-pipe-class
  :inherit-from (position-object)
  :properties (
               ;;Width: X Height: Y Depth: Z
               
               
               ;;USER INPUTS;;
               input-origin-pos (list 3.0 3.0 3.0)
               pipe-direction (list 1 0 0)
               pipe-up-direction (list 0 0 1)
               pipe-x-direction (listDir ^pipe-direction ^pipe-up-direction)
               ;;Pipe radius
               outer-pipe-radius (default 5)
               ;;Clearance between pipe and base-plate
               clearance (default 0)


               
               ;;BACKEND PROPERTIES;;
               ;;Ubeam
               ubeam-pipe-gap (* ^outer-pipe-radius 0.05)
               ubeam-radius 0.0
               ubeam-height 0.0

               ;;Base properties
               base-height ^base-plate-height
               base-depth (* ^outer-pipe-radius 0.5)
               base-width (* ^outer-pipe-radius 3)

               ;;Base-plate properties
               base-plate-height (* (+ ^outer-pipe-radius ^ubeam-thickness) 1.05)
               base-plate-depth (* ^outer-pipe-radius 0.05)
               base-plate-width (* (+ (+ ^outer-pipe-radius ^ubeam-pipe-gap) ^ubeam-thickness) 2.2) 
               

               ;;Ubeam properties
               ubeam-angle (default 180)
               ubeam-thickness (* ^outer-pipe-radius 0.05)
               ubeam-outer-diameter (* ^outer-pipe-radius 0.05)

               ;;Ubeam pipe properties
               pipe-diameter ^ubeam-outer-diameter
               pipe-height (* ^outer-pipe-radius 1.4)

               ;;Base-type
               base-type (default base-ibeam-class)
               base-size1 (* ^outer-pipe-radius 4.41)

               
               )
  
  :subobjects (
               (ubeam1-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 (* ^^outer-pipe-radius 0.5) (+ ^^outer-pipe-radius ^^ubeam-pipe-gap))
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (ubeam1 :class 'ubeam-class
                   elbow-radius (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))
                   thickness ^^ubeam-thickness
                   outer-diameter ^^ubeam-outer-diameter
                   outer-pipe-radius ^^outer-pipe-radius
                   ubeam-pipe-gap ^^ubeam-pipe-gap
                   pipe-height ^^pipe-height
                   base-depth ^^base-depth
                   diameter ^^pipe-diameter
                   reference-coordinate-system ^^ubeam1-coordinate-system
                   )
               (ubeam2-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 (* ^^outer-pipe-radius -0.5) (+ ^^outer-pipe-radius ^^ubeam-pipe-gap))
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (ubeam2 :class 'ubeam-class
                   elbow-radius (+ ^^outer-pipe-radius (/ ^^ubeam-pipe-gap 2))
                   thickness ^^ubeam-thickness
                   outer-diameter ^^ubeam-outer-diameter
                   outer-pipe-radius ^^outer-pipe-radius
                   ubeam-pipe-gap ^^ubeam-pipe-gap
                   pipe-height ^^pipe-height
                   base-depth ^^base-depth
                   diameter ^^pipe-diameter
                   reference-coordinate-system ^^ubeam2-coordinate-system
                   )
               (global-coordinate-system :class 'coordinate-system-class
                   origin ^^input-origin-pos
                   vector-j ^^pipe-direction
                   vector-i ^^pipe-x-direction
                   )
               (base-plate-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 (- (/ ^^base-plate-depth 2)))
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (base-plate :class 'box-object
                   height ^^base-plate-height
                   depth ^^base-plate-depth
                   width ^^base-plate-width
                   reference-coordinate-system ^^base-plate-coordinate-system
                   )
               
               (lower-pipe-support :class 'extrusion-object
                   outer-radius ^outer-pipe-radius
                   vector '(0 1 0)
                   distance (/ (* ^^base-plate-height 1.6) 2)
                   orientation (list
                                (translate (list (* ^^outer-pipe-radius 0.9) (-(/ (* ^^base-plate-height 0.8) 2)) (+ ^^base-plate-depth (* ^^outer-pipe-radius 0.2))))
                                )
                   swept-object ^lower-pipe-support1
                   (lower-pipe-support1 :class 'lower-support-class)
                   reference-coordinate-system ^^global-coordinate-system
                    )
               (lower-pipe-mirror :class 'mirror-object
                   source-object ^^lower-pipe-support
                   basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                   point-on-mirror ^^input-origin-pos
                   )
               

                )
  )


(define-class nut-class
  :inherit-from (difference-object)
  :properties (
               nut-hole-diameter (default .006)
               nut-hex-width (* ^nut-hole-diameter 1.8)
               ;;Gets the points for the hex geometry of a bolt nut
               point-list (get-hexpoints ^nut-hex-width)
               nut-height (* ^nut-hole-diameter 0.9)
               display? t
               ;;Removes the the hole from the solid hex geometry, creating a nut
               object-list (list (the nut) (the hole))
               )
  :subobjects (
               (nut-geometry :class 'polygon-object
                   vertices ^^point-list
                   dimension 2
                   display? nil
                   )
               (nut :class 'extrusion-object
                   swept-object ^^nut-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil

                   )
               (hole-geometry :class 'disc-object
                   diameter ^^nut-hole-diameter
                   display? nil
                   )
               (hole :class 'extrusion-object
                   swept-object ^^hole-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil
                   )
               )
)

(define-class isolated-pipe-class
  :inherit-from (union-object)
  :properties(
              colors '(yellow yellow1 yellow2 yellow3 yellow4 yellowgreen violetred violetred1 violetred2 violetred3 violetred4)
              pipe-diameter (default 0.1)
              length (default (* ^pipe-diameter 25))
              isolation-layer-list (default (list '(0.2 0.05) '(0.3 0.05)))
              number-of-isolation-layers (length ^isolation-layer-list)
              total-diameter (nth 0 (nth (- ^number-of-isolation-layers 1) ^isolation-layer-list))
              object-list (list (the pipe) (the isolation))
              )
  :subobjects(
              (pipe :class 'pipe-object
                  outer-diameter ^^pipe-diameter
                  thickness (/ ^^pipe-diameter 2)
                  height ^^length
                  )
              (isolation :class 'series-object
                  series-prefix 'isolation
                  quantity ^^number-of-isolation-layers
                  class-expression 'pipe-object
                  init-form '(
                              outer-diameter (nth 0 (nth !index !isolation-layer-list))
                              thickness (nth 1 (nth !index !isolation-layer-list))
                              height (* ^^length (- 0.9 (* !index 0.1)))
                              color (nth !index !colors) 
                              )
                  )
              )
  )

(define-class bolt-head-class
  :inherit-from (union-object)
  :properties(
              nut-hole-diameter (default .006)
              nut-hex-width (* ^nut-hole-diameter 1.8)
              ;;Gets the points for the hex geometry of a bolt head
              point-list (get-hexpoints ^nut-hex-width)
              nut-height (* ^nut-hole-diameter 0.9)
              object-list (list (the nut))
              )
  :subobjects (
               (nut-geometry :class 'polygon-object
                   vertices ^^point-list
                   dimension 2
                   display? nil
                   )
               (nut :class 'extrusion-object
                   swept-object ^^nut-geometry
                   vector '(0.0 0.0 10.0)
                   distance ^^nut-height
                   solid? t
                   display? nil
                   )
               )
  )
(define-class bolt-class
  :inherit-from (union-object)
  :properties (
               nut-hole-diameter (default 0.006)
               bolt-height (default 0.05)
               head-height (default 0.048)
               nut-height (* ^nut-hole-diameter 0.9)
               object-list (list (the head) (the shaft))
               )
  :subobjects (
               (head :class 'bolt-head-class
                   nut-hole-diamater ^^nut-hole-diameter
                   display? nil
                   )
               (shaft-geometry :class 'disc-object
                   diameter ^^nut-hole-diameter
                   )
               (shaft :class 'extrusion-object
                   swept-object ^^shaft-geometry
                   vector '(0 0 -1)
                   distance ^^bolt-height
                   display? nil
                   )
               )
)

(define-class bolt-nut-class
  :inherit-from (union-object)
  :properties(
              nut-hole-diameter (default 0.006)
              nut-height (* ^nut-hole-diameter 0.9)
              head-height ^nut-height
              ;;distance between bolt head and the nut 
              nut-bolt-distance (default (* ^nut-height 10))
              object-list (list (the nut) (the bolt))
              )
  :subobjects (
               (bolt :class 'bolt-class
                   nut-hole-diameter ^^nut-hole-diameter
                   bolt-height (+ ^^nut-bolt-distance (* ^^nut-height 2))
                   display? nil
                   )
               (nut :class 'nut-class
                   nut-hole-diameter ^^nut-hole-diameter
                   orientation (list
                                (translate (list 0 0 (- (+ ^^nut-bolt-distance ^^head-height))))
                                )
                   display? nil
                   )
               )
  )

(define-class shims-class
  :inherit-from (graphic-object)
  :properties(
              pipe-diameter (default 0.5)
              thickness (default (/ ^pipe-diameter 40))
              pipe-radius (/ ^pipe-diameter 2)
              contact-shims-pipe-angle (default 60)
              angle (/ ^contact-shims-pipe-angle 2)
              pipe-center-to-top-baseplate (default (/ (* ^pipe-radius 3) 2))
              point4z (* (* ^pipe-radius 0.6) (sind ^angle))
              point-list (list
                          (list (- (* ^pipe-radius 0.8) (+ ^thickness 0.00001)) 0.0 0.0)
                          (list (* ^pipe-radius 0.2) 0.0 0.0)
                          (list (* ^pipe-radius 0.2) 0.0 (- ^pipe-center-to-top-baseplate ^pipe-radius))
                          (list (* ^pipe-radius 0.8) 0.0 (+ (- ^pipe-center-to-top-baseplate ^pipe-radius) ^point4z))
                          (list (* ^pipe-radius 0.8) 0.0 0.0)
                          )
              bolt-hole-width (default (* ^thickness 0.6))
              bolt-height (* ^pipe-radius 0.8)
              bolt-to-nut-distance (default (* 2 (* ^pipe-radius 0.8)))
              shim-width (/ ^pipe-diameter 6)
              )              
  :subobjects(
              (lines :class 'polyline-object
                  vertices ^^point-list
                  )
              (frame :class 'extrusion-object
                  swept-object ^lines
                  vector '(0.0 10.0 0.0)
                  distance ^^shim-width
                  solid? t
                  )
              (right-shim :class 'surface-thickened-class
                  source-object ^frame
                  back-thickness ^^thickness
                  )
              (left-shim :class 'mirror-object
                  source-object ^right-shim
                  basis-vector '((0 1 0) (0 0 1))
                  point-on-mirror '(0 0 0)
               )

              (shim :class 'assembly-object
                  object-list(list (the right-shim) (the left-shim))
                  )
              (bolt-nut :class 'bolt-nut-class
                  nut-hole-diameter ^^bolt-hole-width
                  nut-bolt-distance ^^bolt-to-nut-distance
                  orientation (list
                               (rotate 90 '(0 -1 0))
                               (translate (list                                          
                                           (- (* ^^pipe-radius 0.8))
                                           (/ ^^shim-width 2)
                                           (/ (- ^^pipe-center-to-top-baseplate ^^pipe-radius) 2)
                                           )
                                          )
                               )
                  )
              )
  )

(define-class top-cradle-class
  :inherit-from (union-object)
   :properties (
               pipe-diameter (default 0.5)
               pipe-radius (/ ^pipe-diameter 2)
               tilt-angle (default 30)
               start-angle-arc 4
               start-angle-flip 3
               thickness (/ ^pipe-radius 15)
               flip-thickness (* ^thickness 3)
               clamp-width (default (/ ^pipe-radius 0.5))
               hole-diameter (* ^thickness 0.7)
               object-list (list (the quart-clamp-right) (the quart-clamp-left))
               )
  :subobjects (
               (flip-wire :class 'line-object
                   point1x (* ^^pipe-radius (cosd ^^start-angle-flip))
                   point2x (+ (* ^^pipe-radius (cosd ^^start-angle-flip)) (/ ^^pipe-radius 4))
                   point1z (* ^^pipe-radius (sind ^^start-angle-flip))
                   point2z (* ^^pipe-radius (sind ^^start-angle-flip))
                   flip-lenght (- ^point2x ^point1x)
                   point1 (list ^point1x 0 ^point1z)
                   point2 (list ^point2x 0 ^point2z)
                   display? nil
                   )
               (flip-surface :class 'extrusion-object
                   swept-object ^flip-wire
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (flip :class 'extrusion-object
                   swept-object ^flip-surface
                   vector '(0.0 0.0 10.0)
                   distance ^^flip-thickness
                   solid? t
                   display? nil
                   )
               (arc-wire :class 'arc-object
                   radius ^^pipe-radius
                   start-angle ^^start-angle-arc
                   end-angle 90
                   orientation (list
                                (rotate 90 '(1 0 0))
                                )
                   display? nil
                   )
               (arc-surface :class 'extrusion-object
                   swept-object ^arc-wire
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (arc :class 'surface-thickened-class
                   source-object ^arc-surface
                   back-thickness ^^thickness
                   display? nil
                   )
               (quart-clamp-right :class 'union-object
                   object-list(list (the flip) (the arc))
                   display? nil
                   )
               (hole :class 'cylinder-object
                   height (* ^^thickness 4)
                   diameter ^^hole-diameter
                   )
                (bolt1 :class 'cylinder-object
                    height (* ^^thickness 4)
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 1) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )
                (bolt2 :class 'bolt-nut-class
                  nut-hole-diameter (* ^^thickness 0.7)
                  nut-bolt-distance ^^nut-bolt-distance
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 4) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )
              (bolt3 :class 'bolt-nut-class
                  nut-hole-diameter (* ^^thickness 0.7)
                  nut-bolt-distance ^^nut-bolt-distance
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 7) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )

              (bolts :class 'union-object
                  object-list(list (the bolt1) (the bolt2) (the bolt3))
                  orientation (list
                               (translate (list
                                           0
                                           (- (/ ^^clamp-width 2))
                                           ^^flip-thickness
                                           )
                                          )
                               )
                  display? nil
                  )
               (quart-clamp-left :class 'mirror-object
                  source-object ^quart-clamp-right
                  basis-vector '((0 1 0) (0 0 1))
                  point-on-mirror '(0 0 0)
                  display? nil            
               )              
              )
  )

(define-class cradle-class
  :inherit-from (union-object)
  :properties (
               pipe-diameter (default 0.5)
               pipe-radius (/ ^pipe-diameter 2)
               tilt-angle (default 30)
               start-angle-arc 4
               start-angle-flip 3
               thickness (/ ^pipe-radius 15)
               flip-thickness (* ^thickness 3)
               clamp-width (default (/ ^pipe-radius 0.5))
               nut-bolt-distance (+ (* (* ^pipe-radius (sind 3)) 2) (* ^flip-thickness 2))
               flip-lenght (/ ^pipe-radius 4)
               object-list (list (the clamp) (the fastning))
               nut-hole-diameter (* ^thickness 0.7)
               nut-height (* ^nut-hole-diameter 0.9)
               )
  :subobjects (
               (flip-wire :class 'line-object
                   point1x (* ^^pipe-radius (cosd ^^start-angle-flip))
                   point2x (+ (* ^^pipe-radius (cosd ^^start-angle-flip)) (/ ^^pipe-radius 4))
                   point1z (* ^^pipe-radius (sind ^^start-angle-flip))
                   point2z (* ^^pipe-radius (sind ^^start-angle-flip))
                   flip-lenght (- ^point2x point1x)
                   point1 (list ^point1x 0 ^point1z)
                   point2 (list ^point2x 0 ^point2z)
                   display? nil
                   )
               (flip-surface :class 'extrusion-object
                   swept-object ^flip-wire
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (flip :class 'extrusion-object
                   swept-object ^flip-surface
                   vector '(0.0 0.0 10.0)
                   distance ^^flip-thickness
                   solid? t
                   display? nil
                   )
               (arc-wire :class 'arc-object
                   radius ^^pipe-radius
                   start-angle ^^start-angle-arc
                   end-angle 90
                   orientation (list
                                (rotate 90 '(1 0 0))
                                )
                   display? nil
                   )
               (arc-surface :class 'extrusion-object
                   swept-object ^arc-wire
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (arc :class 'surface-thickened-class
                   source-object ^arc-surface
                   back-thickness ^^thickness
                   display? nil
                   )
               (quart-clamp-right :class 'union-object
                   object-list(list (the flip) (the arc))
                   display? nil
                   )
               (quart-clamp-left :class 'mirror-object
                  source-object ^quart-clamp-right
                  basis-vector '((0 1 0) (0 0 1))
                  point-on-mirror '(0 0 0)
                  display? nil
               
               )
              (quart-clamp-left-down :class 'mirror-object
                  source-object ^quart-clamp-left
                  basis-vector '((1 0 0) (0 1 0))
                  point-on-mirror '(0 0 0)
                  display? nil
               )
              (quart-clamp-right-down :class 'mirror-object
                  source-object ^quart-clamp-right
                  basis-vector '((1 0 0) (0 1 0))
                  point-on-mirror '(0 0 0)
                  display? nil
                  )

              (bolt1 :class 'bolt-nut-class
                  nut-hole-diameter ^^nut-hole-diameter
                  nut-bolt-distance ^^nut-bolt-distance
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 1) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )
              (bolt2 :class 'bolt-nut-class
                  nut-hole-diameter (* ^^thickness 0.7)
                  nut-bolt-distance ^^nut-bolt-distance
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 4) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )
              (bolt3 :class 'bolt-nut-class
                  nut-hole-diameter (* ^^thickness 0.7)
                  nut-bolt-distance ^^nut-bolt-distance
                  orientation (list
                               ;;(rotate 180 '(0 1 0))
                               (translate (list
                                           (+ ^^pipe-radius (/ ^^flip-lenght 2))
                                           (/ (* ^^clamp-width 7) 8)
                                           ^head-height
                                           )
                                          )
                               )
                  display? nil
                  )

              (bolts :class 'union-object
                  object-list(list (the bolt1) (the bolt2) (the bolt3))
                  orientation (list
                               (translate (list
                                           0
                                           (- (/ ^^clamp-width 2))
                                           ^^flip-thickness
                                           )
                                          )
                               )
                  display? nil
                  )
              (mirrored-bolts :class 'mirror-object
                  source-object ^bolts
                  basis-vector '((0 1 0) (0 0 1))
                  point-on-mirror '(0 0 0)
                  display? nil
                  )
              (fastning :class 'union-object
                  object-list (list (the bolts) (the mirrored-bolts))
                  display? nil
                  orientation (list
                               (rotate (- ^^tilt-angle) '(0 1 0))
                               )
                  )
              (clamp :class 'union-object
                  object-list(list (the quart-clamp-left) (the quart-clamp-right) (the quart-clamp-left-down) (the quart-clamp-right-down))
                  display? nil
                  orientation (list
                               (translate (list 0 (- (/ ^^clamp-width 2)) 0))
                               (rotate (- ^^tilt-angle) '(0 1 0))
                               )
                  )
              )
  )
(define-class cradle-with-tilt-style-01-pipe-support-class
  :inherit-from (union-object)
  :properties(
              ;;Pipe Direction New;;;;
              input-origin-pos (default (list 1.0 1.0 1.0))
              pipe-direction (list 0 1 0)
              pipe-up-direction (list 0 0 1)
              pipe-x-direction (listDir ^pipe-direction ^pipe-up-direction)
              reference-coordinate-system (the clamp-reference-coordinate-system)
              ;;;;;;;;;;;
              pipe-diameter (default 0.5)
              pipe-radius (/ ^pipe-diameter 2)
              clamp-tilt-angle (default 30)
              clamp-width ^pipe-diameter
              support-thickness (default (/ ^pipe-diameter 40))
              base-plate-lenght (default ^clamp-width)
              base-plate-width (default ^clamp-width)
              pipe-center-to-bottom-baseplate (default (* ^pipe-diameter 0.7))
              outer-radius-of-clamp (+ ^pipe-radius (/ ^pipe-radius 15))
              object-list (list (the baseplate) (the support-ribs))
              )
  :subobjects (
               ;;Changes;;;;
               (clamp-reference-coordinate-system :class 'coordinate-system-class
                   origin ^^input-origin-pos
                   vector-j ^^pipe-direction
                   vector-i ^^pipe-x-direction
                   )
               ;; End changes;;;
               (clamp-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 ^^pipe-center-to-bottom-baseplate)
                   reference-coordinate-system ^^clamp-reference-coordinate-system
                   display? t
                   )
               (clamp :class 'cradle-class
                   pipe-diameter ^^pipe-diameter
                   tilt-angle ^^clamp-tilt-angle
                   ;;orientation (list (translate '(1 1 1)))
                   reference-coordinate-system ^^clamp-coordinate-system
                   )
               (baseplate :class 'box-object
                   height ^^base-plate-lenght
                   width ^^base-plate-width
                   depth ^^support-thickness
                   display? nil
                   )
               (support-line1 :class 'line-object
                   point1 (list (- (* ^^outer-radius-of-clamp (sind 30))) 0 0)
                   point2 (list (- (* ^^outer-radius-of-clamp (sind 30))) 0 (- ^^pipe-center-to-bottom-baseplate (- (* ^^outer-radius-of-clamp (cosd 30)) (/ ^^support-thickness 2))))
                   display? nil
                   )
               (support-line2 :class 'line-object
                   point1 (list 0 0 0)
                   point2 (list 0 0 (- ^^pipe-center-to-bottom-baseplate (* ^^pipe-radius (cosd 0))))
                   )
               (support-line3 :class 'line-object
                   point1 (list (* ^^outer-radius-of-clamp (sind 30)) 0 0)
                   point2 (list (* ^^outer-radius-of-clamp (sind 30)) 0 (- ^^pipe-center-to-bottom-baseplate (- (* ^^outer-radius-of-clamp (cosd 30)) (/ ^^support-thickness 2))))
                   display? nil
                   )
               (support-surface1 :class 'extrusion-object
                   swept-object ^support-line1
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (support-surface2 :class 'extrusion-object
                   swept-object ^support-line2
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (support-surface3 :class 'extrusion-object
                   swept-object ^support-line3
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (support1-1 :class 'extrusion-object
                   swept-object ^support-surface1
                   vector '(10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support2-1 :class 'extrusion-object
                   swept-object ^support-surface2
                   vector '(10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support3-1 :class 'extrusion-object
                   swept-object ^support-surface3
                   vector '(10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support1-2 :class 'extrusion-object
                   swept-object ^support-surface1
                   vector '(-10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support2-2 :class 'extrusion-object
                   swept-object ^support-surface2
                   vector '(-10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support3-2 :class 'extrusion-object
                   swept-object ^support-surface3
                   vector '(-10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support-ribs :class 'union-object
                   object-list (list (the support1-1) (the support2-1) (the support3-1) (the support1-2) (the support2-2) (the support3-2))
                   orientation (list (translate (list 0 (- (/ ^^clamp-width 2)) 0)))
                   display? nil
                   ;;ference-coordinate-system ^^clamp-reference-coordinate-system
                   )                   
               )
  )

(define-class roller-class
  :inherit-from (rotation-sweep-object solid-object)
  :properties(
              pipe-diameter (default 0.5)
              pipe-radius (/ ^pipe-diameter 2)
              roller-width (* ^pipe-diameter (sind (- ^end-angle ^start-angle)))
              roller-thickness (/ ^roller-width 12)
              core-lenght (default (* ^roller-width 1.2))
              start-angle (default 245)
              end-angle (default 295)
              swept-object (the roller-face)
              angle 360
              axis-point '(0 0 0)
              axis-vector '(1 0 0)
              solid? t
              )
  :subobjects(
              (arc-wire :class 'arc-object
                  radius ^^pipe-radius
                  start-angle ^^start-angle
                  end-angle ^^end-angle
                  orientation (list
                               (rotate 90 '(1 0 0))
                               (translate (list 0 0 ^^pipe-radius))
                               )
                  display? nil
                  )
              (roller-face :class 'extrusion-object
                  swept-object ^arc-wire
                  vector '(0 0 1)
                  distance ^^roller-thickness
                  display? nil
                  )
              )
  )
(define-class roller-support-class
  :inherit-from (assembly-object)
  :properties(
              pipe-diameter (default 0.5)
              pipe-radius (/ ^pipe-diameter 2)
              start-angle (default 245)
              end-angle (default 295)
              roller-width (* ^pipe-diameter (sind (- ^end-angle ^start-angle)))
              roller-thickness (/ ^roller-width 12)
              width (* ^roller-width 1.5)
              core-lenght ^width
              object-list (list (the roller) (the core))
              )
  :subobjects(
              (roller :class '(roller-class solid-object)
                  pipe-diameter ^^pipe-diameter
                  solid? t
                  display? nil
                  )
              (core :class 'cylinder-object
                  diameter (* ^^roller-thickness 1.2)
                  height (/ ^^core-lenght 2)
                  orientation (list (rotate 90 '(0 1 0)))
                  solid? t
                  display? nil
                  )
              )
  )

(define-class cone-support-class
  :inherit-from (assembly-object)
  :properties (
               pipe-diameter (default 0.5)
               pipe-radius (/ ^pipe-diameter 2)
               core-lenght (default (* ^pipe-radius 1.2))
               core-diameter (/ ^pipe-radius 10)
               support-width (* ^core-lenght .9)
               object-list (list (the cones) (the core))
               )
  :subobjects (
               (cone1 :class 'cone-object
                  diameter (/ ^^pipe-radius 3.5)
                  height (/ (* ^^support-width 2) 3)
                  orientation (list
                               (rotate 90 '(0 1 0))
                               (translate (list (- (/ ^height 3)) 0 0))
                               )
                  display? nil
                   )
               (cone2 :class 'cone-object
                  diameter (/ ^^pipe-radius 3.5)
                  height (/ (* ^^support-width 2) 3)
                  orientation (list
                               (rotate -90 '(0 1 0))
                               (translate (list (/ ^height 3) 0 0))
                               )
                  display? nil
                   )
               (cones :class 'union-object
                   object-list (list (the cone1) (the cone2))
                   display? nil
                   )
               (core :class 'cylinder-object
                   diameter ^^core-diameter
                   height ^^core-lenght
                   orientation (list (rotate 90 '(0 1 0)))
                   display? nil
                   )
               )
  )

(define-class cradle-with-tilt-style-02-pipe-support-class
  :inherit-from (union-object)
  :properties(
              ;;Pipe Direction New;;;;
              input-origin-pos (default (list 1.0 1.0 1.0))
              pipe-direction (list 0 1 0)
              pipe-up-direction (list 0 0 1)
              pipe-x-direction (listDir ^pipe-direction ^pipe-up-direction)
              ;;;;;;;;;;;
              pipe-diameter (default 0.5)
              pipe-radius (/ ^pipe-diameter 2)
              clamp-tilt-angle (default 30)
              clamp-width ^pipe-diameter
              support-thickness (default (/ ^pipe-diameter 40))
              base-plate-lenght (default ^clamp-width)
              base-plate-width (default ^clamp-width)
              pipe-center-to-bottom-baseplate (default (* ^pipe-diameter 0.7))
              outer-radius-of-clamp (+ ^pipe-radius (/ ^pipe-radius 15))
              object-list (list (the baseplate) (the support-ribs) (the rollers))
              reference-coordinate-system (the clamp-reference-coordinate-system)
                            
              )
  :subobjects (
               ;;Changes;;;;
               (clamp-reference-coordinate-system :class 'coordinate-system-class
                   origin ^^input-origin-pos
                   vector-j ^^pipe-direction
                   vector-i ^^pipe-x-direction
                   )
               ;; End changes;;;
               (clamp-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 ^^pipe-center-to-bottom-baseplate)
                   reference-coordinate-system ^^clamp-reference-coordinate-system
                   display? t
                   )
               (clamp :class 'cradle-class
                   pipe-diameter ^^pipe-diameter
                   tilt-angle ^^clamp-tilt-angle
                   ;;orientation (list (translate '(1 1 1)))
                   reference-coordinate-system ^^clamp-coordinate-system
                   )
               (baseplate :class 'box-object
                   height ^^base-plate-lenght
                   width ^^base-plate-width
                   depth ^^support-thickness
                   display? nil
                   )
               (support-line1 :class 'line-object
                   point1 (list (- (* ^^outer-radius-of-clamp (sind 30))) 0 0)
                   point2 (list (- (* ^^outer-radius-of-clamp (sind 30))) 0 (- ^^pipe-center-to-bottom-baseplate (- (* ^^outer-radius-of-clamp (cosd 30)) (/ ^^support-thickness 2))))
                   display? nil
                   )
               (support-line3 :class 'line-object
                   point1 (list (* ^^outer-radius-of-clamp (sind 30)) 0 0)
                   point2 (list (* ^^outer-radius-of-clamp (sind 30)) 0 (- ^^pipe-center-to-bottom-baseplate (- (* ^^outer-radius-of-clamp (cosd 30)) (/ ^^support-thickness 2))))
                   display? nil
                   )
               (support-surface1 :class 'extrusion-object
                   swept-object ^support-line1
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (support-surface3 :class 'extrusion-object
                   swept-object ^support-line3
                   vector '(0.0 10.0 0.0)
                   distance ^^clamp-width
                   solid? t
                   display? nil
                   )
               (support1-1 :class 'extrusion-object
                   swept-object ^support-surface1
                   vector '(10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support3-1 :class 'extrusion-object
                   swept-object ^support-surface3
                   vector '(10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support1-2 :class 'extrusion-object
                   swept-object ^support-surface1
                   vector '(-10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support3-2 :class 'extrusion-object
                   swept-object ^support-surface3
                   vector '(-10.0 0.0 0.0)
                   distance (/ ^^support-thickness 2)
                   solid? t
                   display? nil
                   )
               (support-ribs :class 'union-object
                   object-list (list (the support1-1) (the support3-1) (the support1-2) (the support3-2))
                   orientation (list (translate (list 0 (- (/ ^^clamp-width 2)) 0)))
                   display? nil
                   ;;reference-coordinate-system ^^clamp-reference-coordinate-system
                   )
               (roller1 :class 'cone-support-class
                   pipe-diameter ^^pipe-diameter
                   z-comp (- (- ^^pipe-center-to-bottom-baseplate ^^outer-radius-of-clamp) ^core-diameter)
                   orientation (list
                                (translate (list 0 (- (/ (* ^^clamp-width 7) 16)) ^z-comp))
                                )
                   display? nil
                   )
               (roller2 :class 'cone-support-class
                   pipe-diameter ^^pipe-diameter
                   z-comp (- (- ^^pipe-center-to-bottom-baseplate ^^outer-radius-of-clamp) ^core-diameter)
                   orientation (list
                                (translate (list 0 0 ^z-comp))
                                )
                   display? nil
                   )
               (roller3 :class 'cone-support-class
                   pipe-diameter ^^pipe-diameter
                   z-comp (- (- ^^pipe-center-to-bottom-baseplate ^^outer-radius-of-clamp) ^core-diameter)
                   orientation (list
                                (translate (list 0 (/ (* ^^clamp-width 7) 16) ^z-comp))

                                )
                   display? nil
                   )
               (rollers :class 'union-object
                   object-list (list
                                (the roller1)
                                (the roller2)
                                (the roller3)
                                )
                   display? nil
                   )
               )
  )

(define-class pipe-support-flat-class
  :inherit-from (object)
  :properties (
               ;;Height Y
               ;;Width X
               ;;Depth Z
               
               ;;USER INPUTS
               input-origin-pos (list 2.0 2.0 2.0)
               pipe-direction (list 0 0 1)
               pipe-up-direction (list 0 1 0)
               pipe-x-direction (listDir ^pipe-direction ^pipe-up-direction)
               
               ;;Pipe properties
              ;; pipe-height (default 10)
               outer-pipe-radius (default 1)
               ubeam-pipe-gap (* ^outer-pipe-radius 0.05)
               ubeam-radius 0.0
               ubeam-height 0.0

               ;;Base properties
               base-height (^base-plate-height)
               base-depth (* ^outer-pipe-radius 0.5)
               base-width (* ^outer-pipe-radius 3)

               ;;Base-plate properties
               base-plate-height (* (+ ^outer-pipe-radius ^ubeam-thickness) 1.05)
               base-plate-depth (* ^outer-pipe-radius 0.05)
               base-plate-width (* (+ (+ ^outer-pipe-radius ^ubeam-pipe-gap) ^ubeam-thickness) 2.2) 
               

               ;;Ubeam properties
               ubeam-angle (default 180)
               ubeam-thickness (* ^outer-pipe-radius 0.05)
               ubeam-outer-diameter (* ^outer-pipe-radius 0.05)

               ;;Ubeam pipe properties
               pipe-diameter ^ubeam-outer-diameter
               pipe-height (* ^outer-pipe-radius 1.4)

               ;;Base-type
               base-type (default base-ibeam-class)
               base-size1 (* ^outer-pipe-radius 4.41)

               ;;Base-concrete-ubeam
               
               )
  
  :subobjects (
                (global-coordinate-system :class 'coordinate-system-class
                  origin ^^input-origin-pos
                  vector-j ^^pipe-direction
                  vector-i ^^pipe-x-direction
                  
                  )
               (base-plate-coordinate-system :class 'coordinate-system-class
                   origin (list 0.0 0.0 (- (/ ^^base-plate-depth 2)))
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (base-plate :class 'box-object
                   height ^^base-plate-height
                   depth ^^base-plate-depth
                   width ^^base-plate-width
                   reference-coordinate-system ^^base-plate-coordinate-system
                   )
               (ubeam3-coordinate-system :class 'coordinate-system-class
                   vector-j '(0 0 1)
                   origin (list 0.0 (* ^^outer-pipe-radius 0.5) (+ ^^outer-pipe-radius ^^ubeam-pipe-gap))
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (ubeam1 :class 'flat-ubeam-class
                   base-height ^^base-plate-height
                   outer-pipe-radius ^^outer-pipe-radius
                   ubeam-pipe-gap ^^ubeam-pipe-gap
                   pipe-height ^^pipe-height
                   base-depth ^^base-depth
                   diameter ^^pipe-diameter
                   input-origin-pos ^^input-origin-pos
                   pipe-direction ^^pipe-direction
                   pipe-up-direction ^^pipe-up-direction
               
                   reference-coordinate-system ^^ubeam3-coordinate-system
                   )
               
               (triangle :class 'extrusion-object
                   swept-object ^triangle1
                   vector '(0 1 0)
                   distance (/ (* ^^base-plate-height 1.6) 2)
                   (triangle1 :class 'triangle-class
                              vertices (list
                                        (list 0.0 0.0 0.0)
                                        (list 0.0 0.0 (/ ^^pipe-height 2))
                                        (list (/ ^^pipe-height 2) 0.0 0.0)
                                        
                                        )
                              distance ^^base-plate-depth
                              orientation (list
                                           (translate (list (+ ^^outer-pipe-radius ^^ubeam-pipe-gap) (-(* ^^outer-pipe-radius 0.4)) (* ^^outer-pipe-radius 0.05))))
                              )
                   reference-coordinate-system ^^global-coordinate-system
                   )
               (triangle-mirror :class 'mirror-object
                   source-object ^^triangle
                   basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                   point-on-mirror ^^input-origin-pos
                  ;; reference-coordinate-system ^^global-coordinate-system
                   )
               
               (lower-pipe-support :class 'extrusion-object
                   outer-radius ^outer-pipe-radius
                   vector '(0 1 0)
                   distance (/ (* ^^base-plate-height 1.6) 2)
                   orientation (list
                                (translate (list (* ^^outer-pipe-radius 0.9) (-(/ (* ^^base-plate-height 0.8) 2)) (+ ^^base-plate-depth (* ^^outer-pipe-radius 0.2))))
                                )
                   swept-object ^lower-pipe-support1
                   (lower-pipe-support1 :class 'lower-support-class)
                    reference-coordinate-system ^^global-coordinate-system
                    )
               (lower-pipe-mirror :class 'mirror-object
                   source-object ^^lower-pipe-support
                   basis-vector (list ^^pipe-direction ^^pipe-up-direction)
                   point-on-mirror ^^input-origin-pos
                  ;; reference-coordinate-system ^^global-coordinate-system
                   )
                )
  )



;;; (define-class pipe-support-data-class
;;;   :inherit-from (pipe-support-class data-model-node-mixin)
;;;   :properties(
;;;               property-objects-list
;;;               (list
;;;                "Parameters"
;;;                (^outer-pipe-radius self)
;;;               )
;;;               label "Pipe-support Data"
;;;               (pipe-support-radius-class :class 'editable-data-property
;;;                   label "Pipe Radius"
;;;                   formula :inherit-formula
;;;                   )
;;;               (ubeam-type :class 'option-property-class
;;;                   label "Ubeam type"
;;;                   mode 'menu
;;;                   formula :inherit-formula
;;;                   options-list '(flat-ubeam-class ubeam-class)
;;;                   labels-list '("Flat" "Pipe")
;;;                   )
;;;               )
;;;   )

(defun get-hexpoints (nut-width)
  (let* (
         (d (/ (* nut-width 1.11) 2))
         (point1 (list (* d (cosd 30)) (* d (sind 30)) 0))
         (point2 (list 0 d 0))
         (point3 (list (* d (cosd 150)) (* d (sind 150)) 0))
         (point4 (list (* d (cosd 210)) (* d (sind 210)) 0))
         (point5 (list 0 (- 0 d) 0))
         (point6 (list (* d (cosd 330)) (* d (sind 330)) 0))
                                                                    
         (pointlist (list point1 point2 point3 point4 point5 point6))
        
        
        )
    pointlist
    )
  )